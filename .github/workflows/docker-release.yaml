name: Docker Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths-ignore:
      - README.md

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  collect-apps:
    runs-on: ubuntu-latest
    outputs:
      app_matrix: ${{ steps.set-app-matrix.outputs.app_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        uses: mbround18/gh-reusable/actions/install-cli@main
        with:
          repository: "jqlang/jq"
          asset: "jq-linux-amd64"
          override-name: "jq"

      - name: Extract package names and create matrix
        id: set-app-matrix
        run: |
          # Extract package names from Cargo.toml files
          app_names=$(find ./apps -name "Cargo.toml" -type f | xargs -I{} grep -l "^\[package\]" {} | xargs -I{} bash -c 'grep -m1 "^name" {} | sed -E "s/name[[:space:]]*=[[:space:]]*\"([^\"]*)\"/\1/"')

          # Use jq to create the JSON array of objects with 'name' property
          app_matrix=$(echo "$app_names" | grep -v '^$' | jq -R -s 'split("\n") | map(select(length > 0)) | map({"app_name": .})')

          echo "app_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "${app_matrix}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT       

          echo "Generated matrix: ${app_matrix}"

  rust:
    uses: mbround18/gh-reusable/.github/workflows/rust-build-n-test.yml@main

  release:
    needs:
      - collect-apps
      - rust
    strategy:
      matrix:
        include: ${{ fromJson(needs.collect-apps.outputs.app_matrix) }}
    uses: mbround18/gh-reusable/.github/workflows/docker-release.yaml@main
    with:
      image: mbround18/gsm-reference
      target: gh-runtime
      # app_name plus dash for the version.
      semver_prefix: ${{ matrix.app_name }}-
      download_artifact: rust-release
      download_artifact_destination: dist
    secrets:
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  tagger:
    if: ${{ github.ref_name == 'main' }}
    needs:
      - collect-apps
      - release
    strategy:
      matrix:
        include: ${{ fromJson(needs.collect-apps.outputs.app_matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: "${{ secrets.GH_TOKEN }}"
          fetch-depth: 0

      - uses: mbround18/gh-reusable/actions/semver@main
        id: semver
        with:
          prefix: ${{ matrix.app_name }}

      - name: Create tag
        id: create-tag
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "actions@no-reply.github.com"

          echo "Creating tag for ${{ matrix.app_name }}"
          git tag -a "${{ steps.semver.outputs.new_version }}" -m "Release ${{ steps.semver.outputs.new_version }}"
          git push origin "${{ steps.semver.outputs.new_version }}"
